09800065 // 0000 1001 1000 0000 0000 0000 0110 0101 : ldi r3, 0x65  done
09980003 // 0000 1001 1001 1000 0000 0000 0000 0011 : ldi r3, 3(r3) r3 = 0x68
01000054 // 0000 0001 0000 0000 0000 0000 0101 0100 : 02000054 ld r2, 0x54 r2=0x97
09100001 // 0000 1001 0001 0000 0000 0000 0000 0001 : 03100063 ldi r2, 1(r2) r2 = 0x98 //
0017FFFA // 0000 0000 0001 0111 1111 1111 1111 1010 : 02000054 ld r0,-6(r2)->0x92 r0=0x46 // 
08800003 // 0000 1000 1000 0000 0000 0000 0000 0011 : ldi r1,3 // r1=3 //
09800057 // 0000 1001 1000 0000 0000 0000 0101 0111 : ldi r3,0x57 r3=0x57 //
99980003 // 1001 1001 1001 1000 0000 0000 0000 0003 brmi R3, 3 branch 3 if r3 is neg (will not branch)//
09980003 // 0000 1001 1001 1000 0000 0000 0000 0011 : ldi r3, 3(r3) r3 = 0x5A
021FFFFA // 0000 0010 0001 1111 1111 1111 1111 1010 : 02000054 ld r4,-6(r3)->0x54 r4=0x97 // 
D0000000 // 1101 0000 0000 0000 0000 0000 0000 0000 : nop //
9A100002 // 1001 1010 0001 0000 0000 0000 0000 0010 brpl R4, 2 branch 2 if r4 is pos (will branch)//
0B180007 // 0000 1011 0001 1000 0000 0000 0000 0111 : ldi r6, 7(r3)// will not execute 
0AB7FFFC // 0000 1010 1011 0111 1111 1111 1111 1100 : ldi r5, -4(r6)// will not execute
19988000 // 0001 1001 1001 1000 1000 0000 0000 0000 : add r3, r3, r1 r=0x5D //
62200002 // 0110 0010 0010 0000 0000 0000 0000 0010 : addi r4, r4, 2 r4=0x99 //
8A200000 // 1000 1010 0010 0000 0000 0000 0000 0000 : neg r4, r4 r4=0xFFFFFF67 //
92200000 // 1001 0010 0010 0000 0000 0000 0000 0000 : not r4, r4 r4=0x98 //
6A20000F // 0110 1010 0010 0000 0000 0000 0000 1111 : andi R4, R4, 0xF r4=8 // 
39008000 // 0011 1001 0000 0000 1000 0000 0000 0000 : ror r2, r0, r1 // CHECKING 
72100007 // 0111 0010 0001 0000 0000 0000 0000 0111 : ori r4, r2, 7 // done
51208000 // 0101 0001 0010 0000 1000 0000 0000 0000 : shra r2, r4, r1 // done
49988000 // 0100 1001 1001 1000 1000 0000 0000 0000 : shr r3, r3, r1 // done
11800092 // 0001 0001 1000 0000 0000 0000 1001 0010 : st 0x92, r3 // done r3=9D
41808000 // 0100 0001 1000 0000 1000 0000 0000 0000 : rol r3, r0, r1 // done
32880000 // 0011 0010 1000 1000 0000 0000 0000 0000 : or r5, r1, r0 // done
29180000 // 0010 1001 0001 1000 0000 0000 0000 0000 : and r2, r3, r0 // done
12900054 // 0001 0010 1001 0000 0000 0000 0101 0100 : st 0x54(r2), r5 // check this one cause wtf
201A8000 // 0010 0000 0001 1010 1000 0000 0000 0000 : sub r0, r3, r5 // done
59188000 // 0101 1001 0001 1000 1000 0000 0000 0000 : shl r2, r3, r1 // done
0A800008 // 0000 1010 1000 0000 0000 0000 0000 1000 : ldi r5, 8 // done
0B000017 // 0000 1011 0000 0000 0000 0000 0001 0111 : ldi r6, 0x17 // done
83280000 // 1000 0011 0010 1000 0000 0000 0000 0000 : mul r6, r5 // done
CA000000 // 1100 1010 0000 0000 0000 0000 0000 0000 : mfhi r4 // done
C3800000 // 1100 0011 1000 0000 0000 0000 0000 0000 : mflo r7 // done
7B280000 // 0111 1011 0010 1000 0000 0000 0000 0000 : div r6, r5 // done
0D280001 // 0000 1101 0010 1000 0000 0000 0000 0001 : ldi r10, 1(r5) // done
0DB7FFFD // 0000 1101 1011 0111 1111 1111 1111 1101 : ldi r11, -3(r6) // check?
0E380001 // 0000 1110 0011 1000 0000 0000 0000 0001 : ldi r12, 1(r7) // done
0EA00004 // 0000 1110 1010 0000 0000 0000 0000 0100 : ldi r13, 4(r4) // done
A6000000 // 1010 0110 0000 0000 0000 0000 0000 0000 : jal r12 store return address into r8 through simulation signal
B2000000 // 1011 0010 0000 0000 0000 0000 0000 0000 : in r4 set 8 swtiches to 0xCO read it to lower 8 bits 
12000055 // 0001 0010 0000 0000 0000 0000 0101 0101 : st 0x55, r4 // 
0880002E // 0000 1000 1000 0000 0000 0000 0010 1110 : ldi r1, 0x2E // done
0B800001 // 0000 1011 1000 0000 0000 0000 0000 0001 : ldi r7, 0x1 // done
0A800028 // 0000 1010 1000 0000 0000 0000 0010 1000 : ldi r5, 0x28 // done
BA000000 // 1011 1010 0000 0000 0000 0000 0000 0000 : out r4
0AAFFFFF // 0000 1010 1010 1111 1111 1111 1111 1111 : ldi r5, -1(r5) // done
9A800008 // 1001 1010 1000 0000 0000 0000 0000 1000 : brmi R5, 8 
030000F0 // 0000 0011 0000 0000 0000 0000 1111 0000 : ld r5, 0xF0
0AAFFFFF // 0000 1011 0011 0111 1111 1111 1111 1111 : ldi r6, -1(r6) // done
D0000000 // 1101 0000 0000 0000 0000 0000 0000 0000 : nop
9B0FFFFD // 1001 1011 0000 1111 1111 1111 1111 1101 : brnz R6, -3
52238000 // 0101 0010 0010 0011 1000 0000 0000 0000 : shr r4, r4, r7
9A0FFFF7 // 1001 1010 0000 1111 1111 1111 1111 0111 : brnz R4, -9
02000055 // 0000 0010 0000 0000 0000 0000 0101 0101 : ld r4, 0x55
A8800000 // 1010 1000 1000 0000 0000 0000 0000 0000 : jr r1
0A0000AA // 0000 1010 0000 0000 0000 0000 1010 1010 : ldi r4, 0xAA // done
BA000000 // 1011 1010 0000 0000 0000 0000 0000 0000 : out r4
D8000000 // 1101 1000 0000 0000 0000 0000 0000 0000 : HALT when return program haltsCB000000
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
00000097
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0 
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
00000046
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
1FD60000 // 0001 1111 1101 0110 0000 0000 0000 0000 // add r15, r10, r12
275E8000 // 0010 0111 0101 1110 1000 0000 0000 0000 // sub r14, r11, r13
27FF0000 // 0010 0111 1111 1111 0000 0000 0000 0000 // sub r15, r15, r14
AC000000 // 1010 1100 0000 0000 0000 0000 0000 0000 // jr r8
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
000000F0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0